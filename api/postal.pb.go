// Code generated by protoc-gen-gogo.
// source: github.com/jive/postal/api/postal.proto
// DO NOT EDIT!

/*
	Package api is a generated protocol buffer package.

	It is generated from these files:
		github.com/jive/postal/api/postal.proto

	It has these top-level messages:
		Error
		Empty
		Network
		Pool
		Binding
		NetworkRangeRequest
		NetworkRangeResponse
		NetworkAddRequest
		NetworkAddResponse
		NetworkRemoveRequest
		NetworkRemoveResponse
		PoolRangeRequest
		PoolRangeResponse
		PoolAddRequest
		PoolAddResponse
		PoolRemoveRequest
		PoolRemoveResponse
		PoolSetMinMaxRequest
		PoolSetMinMaxResponse
		LookupBindingRequest
		LookupBindingResponse
		AllocateAddressRequest
		AllocateAddressResponse
		BindAddressRequest
		BindAddressResponse
		ReleaseAddressRequest
		ReleaseAddressResponse
*/
package api

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
const _ = proto.ProtoPackageIsVersion1

// Base identity for types of address pools that are supported by the IPAM module
type Pool_Type int32

const (
	// DYNAMIC pool addresses are allocated reactively based on requests to the pool
	Pool_DYNAMIC Pool_Type = 0
	// FIXED pool type indicates that the maximum number of addresses is allocated on the pool's initial creation
	Pool_FIXED Pool_Type = 1
)

var Pool_Type_name = map[int32]string{
	0: "DYNAMIC",
	1: "FIXED",
}
var Pool_Type_value = map[string]int32{
	"DYNAMIC": 0,
	"FIXED":   1,
}

func (x Pool_Type) String() string {
	return proto.EnumName(Pool_Type_name, int32(x))
}
func (Pool_Type) EnumDescriptor() ([]byte, []int) { return fileDescriptorPostal, []int{3, 0} }

type Error struct {
	Code    uint32 `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (m *Error) Reset()                    { *m = Error{} }
func (m *Error) String() string            { return proto.CompactTextString(m) }
func (*Error) ProtoMessage()               {}
func (*Error) Descriptor() ([]byte, []int) { return fileDescriptorPostal, []int{0} }

type Empty struct {
}

func (m *Empty) Reset()                    { *m = Empty{} }
func (m *Empty) String() string            { return proto.CompactTextString(m) }
func (*Empty) ProtoMessage()               {}
func (*Empty) Descriptor() ([]byte, []int) { return fileDescriptorPostal, []int{1} }

type Network struct {
	ID          string            `protobuf:"bytes,1,opt,name=ID,proto3" json:"ID,omitempty"`
	Annotations map[string]string `protobuf:"bytes,2,rep,name=annotations" json:"annotations,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Cidr        string            `protobuf:"bytes,3,opt,name=cidr,proto3" json:"cidr,omitempty"`
}

func (m *Network) Reset()                    { *m = Network{} }
func (m *Network) String() string            { return proto.CompactTextString(m) }
func (*Network) ProtoMessage()               {}
func (*Network) Descriptor() ([]byte, []int) { return fileDescriptorPostal, []int{2} }

func (m *Network) GetAnnotations() map[string]string {
	if m != nil {
		return m.Annotations
	}
	return nil
}

type Pool struct {
	ID          *Pool_PoolID      `protobuf:"bytes,1,opt,name=ID" json:"ID,omitempty"`
	Annotations map[string]string `protobuf:"bytes,2,rep,name=annotations" json:"annotations,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// The maximum number of addresses that the pool should allocate
	MaximumAddresses int32 `protobuf:"varint,3,opt,name=maximumAddresses,proto3" json:"maximumAddresses,omitempty"`
	// The minimum number of addresses that the pool should allocate
	MinimumAddresses int32     `protobuf:"varint,4,opt,name=minimumAddresses,proto3" json:"minimumAddresses,omitempty"`
	Type             Pool_Type `protobuf:"varint,5,opt,name=type,proto3,enum=api.Pool_Type" json:"type,omitempty"`
}

func (m *Pool) Reset()                    { *m = Pool{} }
func (m *Pool) String() string            { return proto.CompactTextString(m) }
func (*Pool) ProtoMessage()               {}
func (*Pool) Descriptor() ([]byte, []int) { return fileDescriptorPostal, []int{3} }

func (m *Pool) GetID() *Pool_PoolID {
	if m != nil {
		return m.ID
	}
	return nil
}

func (m *Pool) GetAnnotations() map[string]string {
	if m != nil {
		return m.Annotations
	}
	return nil
}

type Pool_PoolID struct {
	NetworkID string `protobuf:"bytes,1,opt,name=networkID,proto3" json:"networkID,omitempty"`
	ID        string `protobuf:"bytes,2,opt,name=ID,proto3" json:"ID,omitempty"`
}

func (m *Pool_PoolID) Reset()                    { *m = Pool_PoolID{} }
func (m *Pool_PoolID) String() string            { return proto.CompactTextString(m) }
func (*Pool_PoolID) ProtoMessage()               {}
func (*Pool_PoolID) Descriptor() ([]byte, []int) { return fileDescriptorPostal, []int{3, 0} }

type Binding struct {
	PoolID       *Pool_PoolID      `protobuf:"bytes,1,opt,name=poolID" json:"poolID,omitempty"`
	ID           string            `protobuf:"bytes,2,opt,name=ID,proto3" json:"ID,omitempty"`
	Annotations  map[string]string `protobuf:"bytes,3,rep,name=annotations" json:"annotations,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Address      string            `protobuf:"bytes,4,opt,name=address,proto3" json:"address,omitempty"`
	AllocateTime int64             `protobuf:"varint,5,opt,name=allocateTime,proto3" json:"allocateTime,omitempty"`
	BindTime     int64             `protobuf:"varint,6,opt,name=bindTime,proto3" json:"bindTime,omitempty"`
	ReleaseTime  int64             `protobuf:"varint,7,opt,name=releaseTime,proto3" json:"releaseTime,omitempty"`
}

func (m *Binding) Reset()                    { *m = Binding{} }
func (m *Binding) String() string            { return proto.CompactTextString(m) }
func (*Binding) ProtoMessage()               {}
func (*Binding) Descriptor() ([]byte, []int) { return fileDescriptorPostal, []int{4} }

func (m *Binding) GetPoolID() *Pool_PoolID {
	if m != nil {
		return m.PoolID
	}
	return nil
}

func (m *Binding) GetAnnotations() map[string]string {
	if m != nil {
		return m.Annotations
	}
	return nil
}

type NetworkRangeRequest struct {
	ID      string            `protobuf:"bytes,1,opt,name=ID,proto3" json:"ID,omitempty"`
	Size_   int32             `protobuf:"varint,2,opt,name=size,proto3" json:"size,omitempty"`
	Filters map[string]string `protobuf:"bytes,3,rep,name=filters" json:"filters,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (m *NetworkRangeRequest) Reset()                    { *m = NetworkRangeRequest{} }
func (m *NetworkRangeRequest) String() string            { return proto.CompactTextString(m) }
func (*NetworkRangeRequest) ProtoMessage()               {}
func (*NetworkRangeRequest) Descriptor() ([]byte, []int) { return fileDescriptorPostal, []int{5} }

func (m *NetworkRangeRequest) GetFilters() map[string]string {
	if m != nil {
		return m.Filters
	}
	return nil
}

type NetworkRangeResponse struct {
	Networks []*Network `protobuf:"bytes,1,rep,name=networks" json:"networks,omitempty"`
	Size_    int32      `protobuf:"varint,2,opt,name=size,proto3" json:"size,omitempty"`
}

func (m *NetworkRangeResponse) Reset()                    { *m = NetworkRangeResponse{} }
func (m *NetworkRangeResponse) String() string            { return proto.CompactTextString(m) }
func (*NetworkRangeResponse) ProtoMessage()               {}
func (*NetworkRangeResponse) Descriptor() ([]byte, []int) { return fileDescriptorPostal, []int{6} }

func (m *NetworkRangeResponse) GetNetworks() []*Network {
	if m != nil {
		return m.Networks
	}
	return nil
}

type NetworkAddRequest struct {
	Annotations map[string]string `protobuf:"bytes,1,rep,name=annotations" json:"annotations,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Cidr        string            `protobuf:"bytes,2,opt,name=cidr,proto3" json:"cidr,omitempty"`
}

func (m *NetworkAddRequest) Reset()                    { *m = NetworkAddRequest{} }
func (m *NetworkAddRequest) String() string            { return proto.CompactTextString(m) }
func (*NetworkAddRequest) ProtoMessage()               {}
func (*NetworkAddRequest) Descriptor() ([]byte, []int) { return fileDescriptorPostal, []int{7} }

func (m *NetworkAddRequest) GetAnnotations() map[string]string {
	if m != nil {
		return m.Annotations
	}
	return nil
}

type NetworkAddResponse struct {
	Network *Network `protobuf:"bytes,1,opt,name=network" json:"network,omitempty"`
}

func (m *NetworkAddResponse) Reset()                    { *m = NetworkAddResponse{} }
func (m *NetworkAddResponse) String() string            { return proto.CompactTextString(m) }
func (*NetworkAddResponse) ProtoMessage()               {}
func (*NetworkAddResponse) Descriptor() ([]byte, []int) { return fileDescriptorPostal, []int{8} }

func (m *NetworkAddResponse) GetNetwork() *Network {
	if m != nil {
		return m.Network
	}
	return nil
}

type NetworkRemoveRequest struct {
	ID string `protobuf:"bytes,1,opt,name=ID,proto3" json:"ID,omitempty"`
}

func (m *NetworkRemoveRequest) Reset()                    { *m = NetworkRemoveRequest{} }
func (m *NetworkRemoveRequest) String() string            { return proto.CompactTextString(m) }
func (*NetworkRemoveRequest) ProtoMessage()               {}
func (*NetworkRemoveRequest) Descriptor() ([]byte, []int) { return fileDescriptorPostal, []int{9} }

type NetworkRemoveResponse struct {
}

func (m *NetworkRemoveResponse) Reset()                    { *m = NetworkRemoveResponse{} }
func (m *NetworkRemoveResponse) String() string            { return proto.CompactTextString(m) }
func (*NetworkRemoveResponse) ProtoMessage()               {}
func (*NetworkRemoveResponse) Descriptor() ([]byte, []int) { return fileDescriptorPostal, []int{10} }

type PoolRangeRequest struct {
	ID      *Pool_PoolID      `protobuf:"bytes,1,opt,name=ID" json:"ID,omitempty"`
	Size_   int32             `protobuf:"varint,2,opt,name=size,proto3" json:"size,omitempty"`
	Filters map[string]string `protobuf:"bytes,3,rep,name=filters" json:"filters,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (m *PoolRangeRequest) Reset()                    { *m = PoolRangeRequest{} }
func (m *PoolRangeRequest) String() string            { return proto.CompactTextString(m) }
func (*PoolRangeRequest) ProtoMessage()               {}
func (*PoolRangeRequest) Descriptor() ([]byte, []int) { return fileDescriptorPostal, []int{11} }

func (m *PoolRangeRequest) GetID() *Pool_PoolID {
	if m != nil {
		return m.ID
	}
	return nil
}

func (m *PoolRangeRequest) GetFilters() map[string]string {
	if m != nil {
		return m.Filters
	}
	return nil
}

type PoolRangeResponse struct {
	Pools []*Pool `protobuf:"bytes,1,rep,name=pools" json:"pools,omitempty"`
	Size_ int32   `protobuf:"varint,2,opt,name=size,proto3" json:"size,omitempty"`
}

func (m *PoolRangeResponse) Reset()                    { *m = PoolRangeResponse{} }
func (m *PoolRangeResponse) String() string            { return proto.CompactTextString(m) }
func (*PoolRangeResponse) ProtoMessage()               {}
func (*PoolRangeResponse) Descriptor() ([]byte, []int) { return fileDescriptorPostal, []int{12} }

func (m *PoolRangeResponse) GetPools() []*Pool {
	if m != nil {
		return m.Pools
	}
	return nil
}

type PoolAddRequest struct {
	NetworkID   string            `protobuf:"bytes,1,opt,name=networkID,proto3" json:"networkID,omitempty"`
	Annotations map[string]string `protobuf:"bytes,2,rep,name=annotations" json:"annotations,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Maximum     int32             `protobuf:"varint,3,opt,name=maximum,proto3" json:"maximum,omitempty"`
	Type        Pool_Type         `protobuf:"varint,4,opt,name=type,proto3,enum=api.Pool_Type" json:"type,omitempty"`
}

func (m *PoolAddRequest) Reset()                    { *m = PoolAddRequest{} }
func (m *PoolAddRequest) String() string            { return proto.CompactTextString(m) }
func (*PoolAddRequest) ProtoMessage()               {}
func (*PoolAddRequest) Descriptor() ([]byte, []int) { return fileDescriptorPostal, []int{13} }

func (m *PoolAddRequest) GetAnnotations() map[string]string {
	if m != nil {
		return m.Annotations
	}
	return nil
}

type PoolAddResponse struct {
	Pool *Pool `protobuf:"bytes,1,opt,name=pool" json:"pool,omitempty"`
}

func (m *PoolAddResponse) Reset()                    { *m = PoolAddResponse{} }
func (m *PoolAddResponse) String() string            { return proto.CompactTextString(m) }
func (*PoolAddResponse) ProtoMessage()               {}
func (*PoolAddResponse) Descriptor() ([]byte, []int) { return fileDescriptorPostal, []int{14} }

func (m *PoolAddResponse) GetPool() *Pool {
	if m != nil {
		return m.Pool
	}
	return nil
}

type PoolRemoveRequest struct {
	ID *Pool_PoolID `protobuf:"bytes,1,opt,name=ID" json:"ID,omitempty"`
}

func (m *PoolRemoveRequest) Reset()                    { *m = PoolRemoveRequest{} }
func (m *PoolRemoveRequest) String() string            { return proto.CompactTextString(m) }
func (*PoolRemoveRequest) ProtoMessage()               {}
func (*PoolRemoveRequest) Descriptor() ([]byte, []int) { return fileDescriptorPostal, []int{15} }

func (m *PoolRemoveRequest) GetID() *Pool_PoolID {
	if m != nil {
		return m.ID
	}
	return nil
}

type PoolRemoveResponse struct {
}

func (m *PoolRemoveResponse) Reset()                    { *m = PoolRemoveResponse{} }
func (m *PoolRemoveResponse) String() string            { return proto.CompactTextString(m) }
func (*PoolRemoveResponse) ProtoMessage()               {}
func (*PoolRemoveResponse) Descriptor() ([]byte, []int) { return fileDescriptorPostal, []int{16} }

type PoolSetMinMaxRequest struct {
	ID      *Pool_PoolID `protobuf:"bytes,1,opt,name=ID" json:"ID,omitempty"`
	Maximum int32        `protobuf:"varint,2,opt,name=maximum,proto3" json:"maximum,omitempty"`
}

func (m *PoolSetMinMaxRequest) Reset()                    { *m = PoolSetMinMaxRequest{} }
func (m *PoolSetMinMaxRequest) String() string            { return proto.CompactTextString(m) }
func (*PoolSetMinMaxRequest) ProtoMessage()               {}
func (*PoolSetMinMaxRequest) Descriptor() ([]byte, []int) { return fileDescriptorPostal, []int{17} }

func (m *PoolSetMinMaxRequest) GetID() *Pool_PoolID {
	if m != nil {
		return m.ID
	}
	return nil
}

type PoolSetMinMaxResponse struct {
}

func (m *PoolSetMinMaxResponse) Reset()                    { *m = PoolSetMinMaxResponse{} }
func (m *PoolSetMinMaxResponse) String() string            { return proto.CompactTextString(m) }
func (*PoolSetMinMaxResponse) ProtoMessage()               {}
func (*PoolSetMinMaxResponse) Descriptor() ([]byte, []int) { return fileDescriptorPostal, []int{18} }

type LookupBindingRequest struct {
	// Types that are valid to be assigned to LookupMethod:
	//	*LookupBindingRequest_ById
	//	*LookupBindingRequest_ByAddress
	LookupMethod isLookupBindingRequest_LookupMethod `protobuf_oneof:"LookupMethod"`
}

func (m *LookupBindingRequest) Reset()                    { *m = LookupBindingRequest{} }
func (m *LookupBindingRequest) String() string            { return proto.CompactTextString(m) }
func (*LookupBindingRequest) ProtoMessage()               {}
func (*LookupBindingRequest) Descriptor() ([]byte, []int) { return fileDescriptorPostal, []int{19} }

type isLookupBindingRequest_LookupMethod interface {
	isLookupBindingRequest_LookupMethod()
	MarshalTo([]byte) (int, error)
	Size() int
}

type LookupBindingRequest_ById struct {
	ById *LookupBindingRequest_ByIDMethod `protobuf:"bytes,1,opt,name=by_id,oneof"`
}
type LookupBindingRequest_ByAddress struct {
	ByAddress *LookupBindingRequest_ByAddressMethod `protobuf:"bytes,2,opt,name=by_address,oneof"`
}

func (*LookupBindingRequest_ById) isLookupBindingRequest_LookupMethod()      {}
func (*LookupBindingRequest_ByAddress) isLookupBindingRequest_LookupMethod() {}

func (m *LookupBindingRequest) GetLookupMethod() isLookupBindingRequest_LookupMethod {
	if m != nil {
		return m.LookupMethod
	}
	return nil
}

func (m *LookupBindingRequest) GetById() *LookupBindingRequest_ByIDMethod {
	if x, ok := m.GetLookupMethod().(*LookupBindingRequest_ById); ok {
		return x.ById
	}
	return nil
}

func (m *LookupBindingRequest) GetByAddress() *LookupBindingRequest_ByAddressMethod {
	if x, ok := m.GetLookupMethod().(*LookupBindingRequest_ByAddress); ok {
		return x.ByAddress
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*LookupBindingRequest) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _LookupBindingRequest_OneofMarshaler, _LookupBindingRequest_OneofUnmarshaler, _LookupBindingRequest_OneofSizer, []interface{}{
		(*LookupBindingRequest_ById)(nil),
		(*LookupBindingRequest_ByAddress)(nil),
	}
}

func _LookupBindingRequest_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*LookupBindingRequest)
	// LookupMethod
	switch x := m.LookupMethod.(type) {
	case *LookupBindingRequest_ById:
		_ = b.EncodeVarint(1<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.ById); err != nil {
			return err
		}
	case *LookupBindingRequest_ByAddress:
		_ = b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.ByAddress); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("LookupBindingRequest.LookupMethod has unexpected type %T", x)
	}
	return nil
}

func _LookupBindingRequest_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*LookupBindingRequest)
	switch tag {
	case 1: // LookupMethod.by_id
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(LookupBindingRequest_ByIDMethod)
		err := b.DecodeMessage(msg)
		m.LookupMethod = &LookupBindingRequest_ById{msg}
		return true, err
	case 2: // LookupMethod.by_address
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(LookupBindingRequest_ByAddressMethod)
		err := b.DecodeMessage(msg)
		m.LookupMethod = &LookupBindingRequest_ByAddress{msg}
		return true, err
	default:
		return false, nil
	}
}

func _LookupBindingRequest_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*LookupBindingRequest)
	// LookupMethod
	switch x := m.LookupMethod.(type) {
	case *LookupBindingRequest_ById:
		s := proto.Size(x.ById)
		n += proto.SizeVarint(1<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *LookupBindingRequest_ByAddress:
		s := proto.Size(x.ByAddress)
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type LookupBindingRequest_ByIDMethod struct {
	PoolID *Pool_PoolID `protobuf:"bytes,1,opt,name=poolID" json:"poolID,omitempty"`
	ID     string       `protobuf:"bytes,2,opt,name=ID,proto3" json:"ID,omitempty"`
}

func (m *LookupBindingRequest_ByIDMethod) Reset()         { *m = LookupBindingRequest_ByIDMethod{} }
func (m *LookupBindingRequest_ByIDMethod) String() string { return proto.CompactTextString(m) }
func (*LookupBindingRequest_ByIDMethod) ProtoMessage()    {}
func (*LookupBindingRequest_ByIDMethod) Descriptor() ([]byte, []int) {
	return fileDescriptorPostal, []int{19, 0}
}

func (m *LookupBindingRequest_ByIDMethod) GetPoolID() *Pool_PoolID {
	if m != nil {
		return m.PoolID
	}
	return nil
}

type LookupBindingRequest_ByAddressMethod struct {
	NetworkID string `protobuf:"bytes,1,opt,name=networkID,proto3" json:"networkID,omitempty"`
	Address   string `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`
}

func (m *LookupBindingRequest_ByAddressMethod) Reset()         { *m = LookupBindingRequest_ByAddressMethod{} }
func (m *LookupBindingRequest_ByAddressMethod) String() string { return proto.CompactTextString(m) }
func (*LookupBindingRequest_ByAddressMethod) ProtoMessage()    {}
func (*LookupBindingRequest_ByAddressMethod) Descriptor() ([]byte, []int) {
	return fileDescriptorPostal, []int{19, 1}
}

type LookupBindingResponse struct {
	Binding *Binding `protobuf:"bytes,1,opt,name=binding" json:"binding,omitempty"`
}

func (m *LookupBindingResponse) Reset()                    { *m = LookupBindingResponse{} }
func (m *LookupBindingResponse) String() string            { return proto.CompactTextString(m) }
func (*LookupBindingResponse) ProtoMessage()               {}
func (*LookupBindingResponse) Descriptor() ([]byte, []int) { return fileDescriptorPostal, []int{20} }

func (m *LookupBindingResponse) GetBinding() *Binding {
	if m != nil {
		return m.Binding
	}
	return nil
}

type AllocateAddressRequest struct {
	PoolID  *Pool_PoolID `protobuf:"bytes,1,opt,name=poolID" json:"poolID,omitempty"`
	Address string       `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`
}

func (m *AllocateAddressRequest) Reset()                    { *m = AllocateAddressRequest{} }
func (m *AllocateAddressRequest) String() string            { return proto.CompactTextString(m) }
func (*AllocateAddressRequest) ProtoMessage()               {}
func (*AllocateAddressRequest) Descriptor() ([]byte, []int) { return fileDescriptorPostal, []int{21} }

func (m *AllocateAddressRequest) GetPoolID() *Pool_PoolID {
	if m != nil {
		return m.PoolID
	}
	return nil
}

type AllocateAddressResponse struct {
	Binding *Binding `protobuf:"bytes,1,opt,name=binding" json:"binding,omitempty"`
}

func (m *AllocateAddressResponse) Reset()                    { *m = AllocateAddressResponse{} }
func (m *AllocateAddressResponse) String() string            { return proto.CompactTextString(m) }
func (*AllocateAddressResponse) ProtoMessage()               {}
func (*AllocateAddressResponse) Descriptor() ([]byte, []int) { return fileDescriptorPostal, []int{22} }

func (m *AllocateAddressResponse) GetBinding() *Binding {
	if m != nil {
		return m.Binding
	}
	return nil
}

type BindAddressRequest struct {
	PoolID      *Pool_PoolID      `protobuf:"bytes,1,opt,name=poolID" json:"poolID,omitempty"`
	Address     string            `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`
	Annotations map[string]string `protobuf:"bytes,3,rep,name=annotations" json:"annotations,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (m *BindAddressRequest) Reset()                    { *m = BindAddressRequest{} }
func (m *BindAddressRequest) String() string            { return proto.CompactTextString(m) }
func (*BindAddressRequest) ProtoMessage()               {}
func (*BindAddressRequest) Descriptor() ([]byte, []int) { return fileDescriptorPostal, []int{23} }

func (m *BindAddressRequest) GetPoolID() *Pool_PoolID {
	if m != nil {
		return m.PoolID
	}
	return nil
}

func (m *BindAddressRequest) GetAnnotations() map[string]string {
	if m != nil {
		return m.Annotations
	}
	return nil
}

type BindAddressResponse struct {
	Binding *Binding `protobuf:"bytes,1,opt,name=binding" json:"binding,omitempty"`
}

func (m *BindAddressResponse) Reset()                    { *m = BindAddressResponse{} }
func (m *BindAddressResponse) String() string            { return proto.CompactTextString(m) }
func (*BindAddressResponse) ProtoMessage()               {}
func (*BindAddressResponse) Descriptor() ([]byte, []int) { return fileDescriptorPostal, []int{24} }

func (m *BindAddressResponse) GetBinding() *Binding {
	if m != nil {
		return m.Binding
	}
	return nil
}

type ReleaseAddressRequest struct {
	PoolID    *Pool_PoolID `protobuf:"bytes,1,opt,name=poolID" json:"poolID,omitempty"`
	BindingID string       `protobuf:"bytes,2,opt,name=bindingID,proto3" json:"bindingID,omitempty"`
	Address   string       `protobuf:"bytes,3,opt,name=address,proto3" json:"address,omitempty"`
	Hard      bool         `protobuf:"varint,4,opt,name=hard,proto3" json:"hard,omitempty"`
}

func (m *ReleaseAddressRequest) Reset()                    { *m = ReleaseAddressRequest{} }
func (m *ReleaseAddressRequest) String() string            { return proto.CompactTextString(m) }
func (*ReleaseAddressRequest) ProtoMessage()               {}
func (*ReleaseAddressRequest) Descriptor() ([]byte, []int) { return fileDescriptorPostal, []int{25} }

func (m *ReleaseAddressRequest) GetPoolID() *Pool_PoolID {
	if m != nil {
		return m.PoolID
	}
	return nil
}

type ReleaseAddressResponse struct {
}

func (m *ReleaseAddressResponse) Reset()                    { *m = ReleaseAddressResponse{} }
func (m *ReleaseAddressResponse) String() string            { return proto.CompactTextString(m) }
func (*ReleaseAddressResponse) ProtoMessage()               {}
func (*ReleaseAddressResponse) Descriptor() ([]byte, []int) { return fileDescriptorPostal, []int{26} }

func init() {
	proto.RegisterType((*Error)(nil), "api.Error")
	proto.RegisterType((*Empty)(nil), "api.Empty")
	proto.RegisterType((*Network)(nil), "api.Network")
	proto.RegisterType((*Pool)(nil), "api.Pool")
	proto.RegisterType((*Pool_PoolID)(nil), "api.Pool.PoolID")
	proto.RegisterType((*Binding)(nil), "api.Binding")
	proto.RegisterType((*NetworkRangeRequest)(nil), "api.NetworkRangeRequest")
	proto.RegisterType((*NetworkRangeResponse)(nil), "api.NetworkRangeResponse")
	proto.RegisterType((*NetworkAddRequest)(nil), "api.NetworkAddRequest")
	proto.RegisterType((*NetworkAddResponse)(nil), "api.NetworkAddResponse")
	proto.RegisterType((*NetworkRemoveRequest)(nil), "api.NetworkRemoveRequest")
	proto.RegisterType((*NetworkRemoveResponse)(nil), "api.NetworkRemoveResponse")
	proto.RegisterType((*PoolRangeRequest)(nil), "api.PoolRangeRequest")
	proto.RegisterType((*PoolRangeResponse)(nil), "api.PoolRangeResponse")
	proto.RegisterType((*PoolAddRequest)(nil), "api.PoolAddRequest")
	proto.RegisterType((*PoolAddResponse)(nil), "api.PoolAddResponse")
	proto.RegisterType((*PoolRemoveRequest)(nil), "api.PoolRemoveRequest")
	proto.RegisterType((*PoolRemoveResponse)(nil), "api.PoolRemoveResponse")
	proto.RegisterType((*PoolSetMinMaxRequest)(nil), "api.PoolSetMinMaxRequest")
	proto.RegisterType((*PoolSetMinMaxResponse)(nil), "api.PoolSetMinMaxResponse")
	proto.RegisterType((*LookupBindingRequest)(nil), "api.LookupBindingRequest")
	proto.RegisterType((*LookupBindingRequest_ByIDMethod)(nil), "api.LookupBindingRequest.ByIDMethod")
	proto.RegisterType((*LookupBindingRequest_ByAddressMethod)(nil), "api.LookupBindingRequest.ByAddressMethod")
	proto.RegisterType((*LookupBindingResponse)(nil), "api.LookupBindingResponse")
	proto.RegisterType((*AllocateAddressRequest)(nil), "api.AllocateAddressRequest")
	proto.RegisterType((*AllocateAddressResponse)(nil), "api.AllocateAddressResponse")
	proto.RegisterType((*BindAddressRequest)(nil), "api.BindAddressRequest")
	proto.RegisterType((*BindAddressResponse)(nil), "api.BindAddressResponse")
	proto.RegisterType((*ReleaseAddressRequest)(nil), "api.ReleaseAddressRequest")
	proto.RegisterType((*ReleaseAddressResponse)(nil), "api.ReleaseAddressResponse")
	proto.RegisterEnum("api.Pool_Type", Pool_Type_name, Pool_Type_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion2

// Client API for Postal service

type PostalClient interface {
	NetworkRange(ctx context.Context, in *NetworkRangeRequest, opts ...grpc.CallOption) (*NetworkRangeResponse, error)
	NetworkAdd(ctx context.Context, in *NetworkAddRequest, opts ...grpc.CallOption) (*NetworkAddResponse, error)
	NetworkRemove(ctx context.Context, in *NetworkRemoveRequest, opts ...grpc.CallOption) (*NetworkRemoveResponse, error)
	PoolRange(ctx context.Context, in *PoolRangeRequest, opts ...grpc.CallOption) (*PoolRangeResponse, error)
	PoolAdd(ctx context.Context, in *PoolAddRequest, opts ...grpc.CallOption) (*PoolAddResponse, error)
	PoolRemove(ctx context.Context, in *PoolRemoveRequest, opts ...grpc.CallOption) (*PoolRemoveResponse, error)
	PoolSetMax(ctx context.Context, in *PoolSetMinMaxRequest, opts ...grpc.CallOption) (*PoolSetMinMaxResponse, error)
	LookupBinding(ctx context.Context, in *LookupBindingRequest, opts ...grpc.CallOption) (*LookupBindingResponse, error)
	AllocateAddress(ctx context.Context, in *AllocateAddressRequest, opts ...grpc.CallOption) (*AllocateAddressResponse, error)
	BindAddress(ctx context.Context, in *BindAddressRequest, opts ...grpc.CallOption) (*BindAddressResponse, error)
	ReleaseAddress(ctx context.Context, in *ReleaseAddressRequest, opts ...grpc.CallOption) (*ReleaseAddressResponse, error)
}

type postalClient struct {
	cc *grpc.ClientConn
}

func NewPostalClient(cc *grpc.ClientConn) PostalClient {
	return &postalClient{cc}
}

func (c *postalClient) NetworkRange(ctx context.Context, in *NetworkRangeRequest, opts ...grpc.CallOption) (*NetworkRangeResponse, error) {
	out := new(NetworkRangeResponse)
	err := grpc.Invoke(ctx, "/api.Postal/NetworkRange", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *postalClient) NetworkAdd(ctx context.Context, in *NetworkAddRequest, opts ...grpc.CallOption) (*NetworkAddResponse, error) {
	out := new(NetworkAddResponse)
	err := grpc.Invoke(ctx, "/api.Postal/NetworkAdd", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *postalClient) NetworkRemove(ctx context.Context, in *NetworkRemoveRequest, opts ...grpc.CallOption) (*NetworkRemoveResponse, error) {
	out := new(NetworkRemoveResponse)
	err := grpc.Invoke(ctx, "/api.Postal/NetworkRemove", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *postalClient) PoolRange(ctx context.Context, in *PoolRangeRequest, opts ...grpc.CallOption) (*PoolRangeResponse, error) {
	out := new(PoolRangeResponse)
	err := grpc.Invoke(ctx, "/api.Postal/PoolRange", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *postalClient) PoolAdd(ctx context.Context, in *PoolAddRequest, opts ...grpc.CallOption) (*PoolAddResponse, error) {
	out := new(PoolAddResponse)
	err := grpc.Invoke(ctx, "/api.Postal/PoolAdd", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *postalClient) PoolRemove(ctx context.Context, in *PoolRemoveRequest, opts ...grpc.CallOption) (*PoolRemoveResponse, error) {
	out := new(PoolRemoveResponse)
	err := grpc.Invoke(ctx, "/api.Postal/PoolRemove", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *postalClient) PoolSetMax(ctx context.Context, in *PoolSetMinMaxRequest, opts ...grpc.CallOption) (*PoolSetMinMaxResponse, error) {
	out := new(PoolSetMinMaxResponse)
	err := grpc.Invoke(ctx, "/api.Postal/PoolSetMax", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *postalClient) LookupBinding(ctx context.Context, in *LookupBindingRequest, opts ...grpc.CallOption) (*LookupBindingResponse, error) {
	out := new(LookupBindingResponse)
	err := grpc.Invoke(ctx, "/api.Postal/LookupBinding", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *postalClient) AllocateAddress(ctx context.Context, in *AllocateAddressRequest, opts ...grpc.CallOption) (*AllocateAddressResponse, error) {
	out := new(AllocateAddressResponse)
	err := grpc.Invoke(ctx, "/api.Postal/AllocateAddress", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *postalClient) BindAddress(ctx context.Context, in *BindAddressRequest, opts ...grpc.CallOption) (*BindAddressResponse, error) {
	out := new(BindAddressResponse)
	err := grpc.Invoke(ctx, "/api.Postal/BindAddress", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *postalClient) ReleaseAddress(ctx context.Context, in *ReleaseAddressRequest, opts ...grpc.CallOption) (*ReleaseAddressResponse, error) {
	out := new(ReleaseAddressResponse)
	err := grpc.Invoke(ctx, "/api.Postal/ReleaseAddress", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Postal service

type PostalServer interface {
	NetworkRange(context.Context, *NetworkRangeRequest) (*NetworkRangeResponse, error)
	NetworkAdd(context.Context, *NetworkAddRequest) (*NetworkAddResponse, error)
	NetworkRemove(context.Context, *NetworkRemoveRequest) (*NetworkRemoveResponse, error)
	PoolRange(context.Context, *PoolRangeRequest) (*PoolRangeResponse, error)
	PoolAdd(context.Context, *PoolAddRequest) (*PoolAddResponse, error)
	PoolRemove(context.Context, *PoolRemoveRequest) (*PoolRemoveResponse, error)
	PoolSetMax(context.Context, *PoolSetMinMaxRequest) (*PoolSetMinMaxResponse, error)
	LookupBinding(context.Context, *LookupBindingRequest) (*LookupBindingResponse, error)
	AllocateAddress(context.Context, *AllocateAddressRequest) (*AllocateAddressResponse, error)
	BindAddress(context.Context, *BindAddressRequest) (*BindAddressResponse, error)
	ReleaseAddress(context.Context, *ReleaseAddressRequest) (*ReleaseAddressResponse, error)
}

func RegisterPostalServer(s *grpc.Server, srv PostalServer) {
	s.RegisterService(&_Postal_serviceDesc, srv)
}

func _Postal_NetworkRange_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NetworkRangeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PostalServer).NetworkRange(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Postal/NetworkRange",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PostalServer).NetworkRange(ctx, req.(*NetworkRangeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Postal_NetworkAdd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NetworkAddRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PostalServer).NetworkAdd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Postal/NetworkAdd",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PostalServer).NetworkAdd(ctx, req.(*NetworkAddRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Postal_NetworkRemove_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NetworkRemoveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PostalServer).NetworkRemove(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Postal/NetworkRemove",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PostalServer).NetworkRemove(ctx, req.(*NetworkRemoveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Postal_PoolRange_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PoolRangeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PostalServer).PoolRange(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Postal/PoolRange",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PostalServer).PoolRange(ctx, req.(*PoolRangeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Postal_PoolAdd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PoolAddRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PostalServer).PoolAdd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Postal/PoolAdd",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PostalServer).PoolAdd(ctx, req.(*PoolAddRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Postal_PoolRemove_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PoolRemoveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PostalServer).PoolRemove(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Postal/PoolRemove",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PostalServer).PoolRemove(ctx, req.(*PoolRemoveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Postal_PoolSetMax_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PoolSetMinMaxRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PostalServer).PoolSetMax(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Postal/PoolSetMax",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PostalServer).PoolSetMax(ctx, req.(*PoolSetMinMaxRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Postal_LookupBinding_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LookupBindingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PostalServer).LookupBinding(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Postal/LookupBinding",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PostalServer).LookupBinding(ctx, req.(*LookupBindingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Postal_AllocateAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AllocateAddressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PostalServer).AllocateAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Postal/AllocateAddress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PostalServer).AllocateAddress(ctx, req.(*AllocateAddressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Postal_BindAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BindAddressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PostalServer).BindAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Postal/BindAddress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PostalServer).BindAddress(ctx, req.(*BindAddressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Postal_ReleaseAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReleaseAddressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PostalServer).ReleaseAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Postal/ReleaseAddress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PostalServer).ReleaseAddress(ctx, req.(*ReleaseAddressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Postal_serviceDesc = grpc.ServiceDesc{
	ServiceName: "api.Postal",
	HandlerType: (*PostalServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "NetworkRange",
			Handler:    _Postal_NetworkRange_Handler,
		},
		{
			MethodName: "NetworkAdd",
			Handler:    _Postal_NetworkAdd_Handler,
		},
		{
			MethodName: "NetworkRemove",
			Handler:    _Postal_NetworkRemove_Handler,
		},
		{
			MethodName: "PoolRange",
			Handler:    _Postal_PoolRange_Handler,
		},
		{
			MethodName: "PoolAdd",
			Handler:    _Postal_PoolAdd_Handler,
		},
		{
			MethodName: "PoolRemove",
			Handler:    _Postal_PoolRemove_Handler,
		},
		{
			MethodName: "PoolSetMax",
			Handler:    _Postal_PoolSetMax_Handler,
		},
		{
			MethodName: "LookupBinding",
			Handler:    _Postal_LookupBinding_Handler,
		},
		{
			MethodName: "AllocateAddress",
			Handler:    _Postal_AllocateAddress_Handler,
		},
		{
			MethodName: "BindAddress",
			Handler:    _Postal_BindAddress_Handler,
		},
		{
			MethodName: "ReleaseAddress",
			Handler:    _Postal_ReleaseAddress_Handler,
		},
	},
	Streams: []grpc.StreamDesc{},
}

func (m *Error) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *Error) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Code != 0 {
		data[i] = 0x8
		i++
		i = encodeVarintPostal(data, i, uint64(m.Code))
	}
	if len(m.Message) > 0 {
		data[i] = 0x12
		i++
		i = encodeVarintPostal(data, i, uint64(len(m.Message)))
		i += copy(data[i:], m.Message)
	}
	return i, nil
}

func (m *Empty) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *Empty) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *Network) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *Network) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ID) > 0 {
		data[i] = 0xa
		i++
		i = encodeVarintPostal(data, i, uint64(len(m.ID)))
		i += copy(data[i:], m.ID)
	}
	if len(m.Annotations) > 0 {
		for k, _ := range m.Annotations {
			data[i] = 0x12
			i++
			v := m.Annotations[k]
			mapSize := 1 + len(k) + sovPostal(uint64(len(k))) + 1 + len(v) + sovPostal(uint64(len(v)))
			i = encodeVarintPostal(data, i, uint64(mapSize))
			data[i] = 0xa
			i++
			i = encodeVarintPostal(data, i, uint64(len(k)))
			i += copy(data[i:], k)
			data[i] = 0x12
			i++
			i = encodeVarintPostal(data, i, uint64(len(v)))
			i += copy(data[i:], v)
		}
	}
	if len(m.Cidr) > 0 {
		data[i] = 0x1a
		i++
		i = encodeVarintPostal(data, i, uint64(len(m.Cidr)))
		i += copy(data[i:], m.Cidr)
	}
	return i, nil
}

func (m *Pool) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *Pool) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ID != nil {
		data[i] = 0xa
		i++
		i = encodeVarintPostal(data, i, uint64(m.ID.Size()))
		n1, err := m.ID.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if len(m.Annotations) > 0 {
		for k, _ := range m.Annotations {
			data[i] = 0x12
			i++
			v := m.Annotations[k]
			mapSize := 1 + len(k) + sovPostal(uint64(len(k))) + 1 + len(v) + sovPostal(uint64(len(v)))
			i = encodeVarintPostal(data, i, uint64(mapSize))
			data[i] = 0xa
			i++
			i = encodeVarintPostal(data, i, uint64(len(k)))
			i += copy(data[i:], k)
			data[i] = 0x12
			i++
			i = encodeVarintPostal(data, i, uint64(len(v)))
			i += copy(data[i:], v)
		}
	}
	if m.MaximumAddresses != 0 {
		data[i] = 0x18
		i++
		i = encodeVarintPostal(data, i, uint64(m.MaximumAddresses))
	}
	if m.MinimumAddresses != 0 {
		data[i] = 0x20
		i++
		i = encodeVarintPostal(data, i, uint64(m.MinimumAddresses))
	}
	if m.Type != 0 {
		data[i] = 0x28
		i++
		i = encodeVarintPostal(data, i, uint64(m.Type))
	}
	return i, nil
}

func (m *Pool_PoolID) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *Pool_PoolID) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.NetworkID) > 0 {
		data[i] = 0xa
		i++
		i = encodeVarintPostal(data, i, uint64(len(m.NetworkID)))
		i += copy(data[i:], m.NetworkID)
	}
	if len(m.ID) > 0 {
		data[i] = 0x12
		i++
		i = encodeVarintPostal(data, i, uint64(len(m.ID)))
		i += copy(data[i:], m.ID)
	}
	return i, nil
}

func (m *Binding) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *Binding) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.PoolID != nil {
		data[i] = 0xa
		i++
		i = encodeVarintPostal(data, i, uint64(m.PoolID.Size()))
		n2, err := m.PoolID.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	if len(m.ID) > 0 {
		data[i] = 0x12
		i++
		i = encodeVarintPostal(data, i, uint64(len(m.ID)))
		i += copy(data[i:], m.ID)
	}
	if len(m.Annotations) > 0 {
		for k, _ := range m.Annotations {
			data[i] = 0x1a
			i++
			v := m.Annotations[k]
			mapSize := 1 + len(k) + sovPostal(uint64(len(k))) + 1 + len(v) + sovPostal(uint64(len(v)))
			i = encodeVarintPostal(data, i, uint64(mapSize))
			data[i] = 0xa
			i++
			i = encodeVarintPostal(data, i, uint64(len(k)))
			i += copy(data[i:], k)
			data[i] = 0x12
			i++
			i = encodeVarintPostal(data, i, uint64(len(v)))
			i += copy(data[i:], v)
		}
	}
	if len(m.Address) > 0 {
		data[i] = 0x22
		i++
		i = encodeVarintPostal(data, i, uint64(len(m.Address)))
		i += copy(data[i:], m.Address)
	}
	if m.AllocateTime != 0 {
		data[i] = 0x28
		i++
		i = encodeVarintPostal(data, i, uint64(m.AllocateTime))
	}
	if m.BindTime != 0 {
		data[i] = 0x30
		i++
		i = encodeVarintPostal(data, i, uint64(m.BindTime))
	}
	if m.ReleaseTime != 0 {
		data[i] = 0x38
		i++
		i = encodeVarintPostal(data, i, uint64(m.ReleaseTime))
	}
	return i, nil
}

func (m *NetworkRangeRequest) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *NetworkRangeRequest) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ID) > 0 {
		data[i] = 0xa
		i++
		i = encodeVarintPostal(data, i, uint64(len(m.ID)))
		i += copy(data[i:], m.ID)
	}
	if m.Size_ != 0 {
		data[i] = 0x10
		i++
		i = encodeVarintPostal(data, i, uint64(m.Size_))
	}
	if len(m.Filters) > 0 {
		for k, _ := range m.Filters {
			data[i] = 0x1a
			i++
			v := m.Filters[k]
			mapSize := 1 + len(k) + sovPostal(uint64(len(k))) + 1 + len(v) + sovPostal(uint64(len(v)))
			i = encodeVarintPostal(data, i, uint64(mapSize))
			data[i] = 0xa
			i++
			i = encodeVarintPostal(data, i, uint64(len(k)))
			i += copy(data[i:], k)
			data[i] = 0x12
			i++
			i = encodeVarintPostal(data, i, uint64(len(v)))
			i += copy(data[i:], v)
		}
	}
	return i, nil
}

func (m *NetworkRangeResponse) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *NetworkRangeResponse) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Networks) > 0 {
		for _, msg := range m.Networks {
			data[i] = 0xa
			i++
			i = encodeVarintPostal(data, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(data[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.Size_ != 0 {
		data[i] = 0x10
		i++
		i = encodeVarintPostal(data, i, uint64(m.Size_))
	}
	return i, nil
}

func (m *NetworkAddRequest) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *NetworkAddRequest) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Annotations) > 0 {
		for k, _ := range m.Annotations {
			data[i] = 0xa
			i++
			v := m.Annotations[k]
			mapSize := 1 + len(k) + sovPostal(uint64(len(k))) + 1 + len(v) + sovPostal(uint64(len(v)))
			i = encodeVarintPostal(data, i, uint64(mapSize))
			data[i] = 0xa
			i++
			i = encodeVarintPostal(data, i, uint64(len(k)))
			i += copy(data[i:], k)
			data[i] = 0x12
			i++
			i = encodeVarintPostal(data, i, uint64(len(v)))
			i += copy(data[i:], v)
		}
	}
	if len(m.Cidr) > 0 {
		data[i] = 0x12
		i++
		i = encodeVarintPostal(data, i, uint64(len(m.Cidr)))
		i += copy(data[i:], m.Cidr)
	}
	return i, nil
}

func (m *NetworkAddResponse) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *NetworkAddResponse) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Network != nil {
		data[i] = 0xa
		i++
		i = encodeVarintPostal(data, i, uint64(m.Network.Size()))
		n3, err := m.Network.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	return i, nil
}

func (m *NetworkRemoveRequest) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *NetworkRemoveRequest) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ID) > 0 {
		data[i] = 0xa
		i++
		i = encodeVarintPostal(data, i, uint64(len(m.ID)))
		i += copy(data[i:], m.ID)
	}
	return i, nil
}

func (m *NetworkRemoveResponse) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *NetworkRemoveResponse) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *PoolRangeRequest) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *PoolRangeRequest) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ID != nil {
		data[i] = 0xa
		i++
		i = encodeVarintPostal(data, i, uint64(m.ID.Size()))
		n4, err := m.ID.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	if m.Size_ != 0 {
		data[i] = 0x10
		i++
		i = encodeVarintPostal(data, i, uint64(m.Size_))
	}
	if len(m.Filters) > 0 {
		for k, _ := range m.Filters {
			data[i] = 0x1a
			i++
			v := m.Filters[k]
			mapSize := 1 + len(k) + sovPostal(uint64(len(k))) + 1 + len(v) + sovPostal(uint64(len(v)))
			i = encodeVarintPostal(data, i, uint64(mapSize))
			data[i] = 0xa
			i++
			i = encodeVarintPostal(data, i, uint64(len(k)))
			i += copy(data[i:], k)
			data[i] = 0x12
			i++
			i = encodeVarintPostal(data, i, uint64(len(v)))
			i += copy(data[i:], v)
		}
	}
	return i, nil
}

func (m *PoolRangeResponse) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *PoolRangeResponse) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Pools) > 0 {
		for _, msg := range m.Pools {
			data[i] = 0xa
			i++
			i = encodeVarintPostal(data, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(data[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.Size_ != 0 {
		data[i] = 0x10
		i++
		i = encodeVarintPostal(data, i, uint64(m.Size_))
	}
	return i, nil
}

func (m *PoolAddRequest) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *PoolAddRequest) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.NetworkID) > 0 {
		data[i] = 0xa
		i++
		i = encodeVarintPostal(data, i, uint64(len(m.NetworkID)))
		i += copy(data[i:], m.NetworkID)
	}
	if len(m.Annotations) > 0 {
		for k, _ := range m.Annotations {
			data[i] = 0x12
			i++
			v := m.Annotations[k]
			mapSize := 1 + len(k) + sovPostal(uint64(len(k))) + 1 + len(v) + sovPostal(uint64(len(v)))
			i = encodeVarintPostal(data, i, uint64(mapSize))
			data[i] = 0xa
			i++
			i = encodeVarintPostal(data, i, uint64(len(k)))
			i += copy(data[i:], k)
			data[i] = 0x12
			i++
			i = encodeVarintPostal(data, i, uint64(len(v)))
			i += copy(data[i:], v)
		}
	}
	if m.Maximum != 0 {
		data[i] = 0x18
		i++
		i = encodeVarintPostal(data, i, uint64(m.Maximum))
	}
	if m.Type != 0 {
		data[i] = 0x20
		i++
		i = encodeVarintPostal(data, i, uint64(m.Type))
	}
	return i, nil
}

func (m *PoolAddResponse) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *PoolAddResponse) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Pool != nil {
		data[i] = 0xa
		i++
		i = encodeVarintPostal(data, i, uint64(m.Pool.Size()))
		n5, err := m.Pool.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n5
	}
	return i, nil
}

func (m *PoolRemoveRequest) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *PoolRemoveRequest) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ID != nil {
		data[i] = 0xa
		i++
		i = encodeVarintPostal(data, i, uint64(m.ID.Size()))
		n6, err := m.ID.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n6
	}
	return i, nil
}

func (m *PoolRemoveResponse) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *PoolRemoveResponse) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *PoolSetMinMaxRequest) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *PoolSetMinMaxRequest) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ID != nil {
		data[i] = 0xa
		i++
		i = encodeVarintPostal(data, i, uint64(m.ID.Size()))
		n7, err := m.ID.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n7
	}
	if m.Maximum != 0 {
		data[i] = 0x10
		i++
		i = encodeVarintPostal(data, i, uint64(m.Maximum))
	}
	return i, nil
}

func (m *PoolSetMinMaxResponse) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *PoolSetMinMaxResponse) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *LookupBindingRequest) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *LookupBindingRequest) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.LookupMethod != nil {
		nn8, err := m.LookupMethod.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += nn8
	}
	return i, nil
}

func (m *LookupBindingRequest_ById) MarshalTo(data []byte) (int, error) {
	i := 0
	if m.ById != nil {
		data[i] = 0xa
		i++
		i = encodeVarintPostal(data, i, uint64(m.ById.Size()))
		n9, err := m.ById.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n9
	}
	return i, nil
}
func (m *LookupBindingRequest_ByAddress) MarshalTo(data []byte) (int, error) {
	i := 0
	if m.ByAddress != nil {
		data[i] = 0x12
		i++
		i = encodeVarintPostal(data, i, uint64(m.ByAddress.Size()))
		n10, err := m.ByAddress.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n10
	}
	return i, nil
}
func (m *LookupBindingRequest_ByIDMethod) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *LookupBindingRequest_ByIDMethod) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.PoolID != nil {
		data[i] = 0xa
		i++
		i = encodeVarintPostal(data, i, uint64(m.PoolID.Size()))
		n11, err := m.PoolID.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n11
	}
	if len(m.ID) > 0 {
		data[i] = 0x12
		i++
		i = encodeVarintPostal(data, i, uint64(len(m.ID)))
		i += copy(data[i:], m.ID)
	}
	return i, nil
}

func (m *LookupBindingRequest_ByAddressMethod) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *LookupBindingRequest_ByAddressMethod) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.NetworkID) > 0 {
		data[i] = 0xa
		i++
		i = encodeVarintPostal(data, i, uint64(len(m.NetworkID)))
		i += copy(data[i:], m.NetworkID)
	}
	if len(m.Address) > 0 {
		data[i] = 0x12
		i++
		i = encodeVarintPostal(data, i, uint64(len(m.Address)))
		i += copy(data[i:], m.Address)
	}
	return i, nil
}

func (m *LookupBindingResponse) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *LookupBindingResponse) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Binding != nil {
		data[i] = 0xa
		i++
		i = encodeVarintPostal(data, i, uint64(m.Binding.Size()))
		n12, err := m.Binding.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n12
	}
	return i, nil
}

func (m *AllocateAddressRequest) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *AllocateAddressRequest) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.PoolID != nil {
		data[i] = 0xa
		i++
		i = encodeVarintPostal(data, i, uint64(m.PoolID.Size()))
		n13, err := m.PoolID.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n13
	}
	if len(m.Address) > 0 {
		data[i] = 0x12
		i++
		i = encodeVarintPostal(data, i, uint64(len(m.Address)))
		i += copy(data[i:], m.Address)
	}
	return i, nil
}

func (m *AllocateAddressResponse) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *AllocateAddressResponse) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Binding != nil {
		data[i] = 0xa
		i++
		i = encodeVarintPostal(data, i, uint64(m.Binding.Size()))
		n14, err := m.Binding.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n14
	}
	return i, nil
}

func (m *BindAddressRequest) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *BindAddressRequest) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.PoolID != nil {
		data[i] = 0xa
		i++
		i = encodeVarintPostal(data, i, uint64(m.PoolID.Size()))
		n15, err := m.PoolID.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n15
	}
	if len(m.Address) > 0 {
		data[i] = 0x12
		i++
		i = encodeVarintPostal(data, i, uint64(len(m.Address)))
		i += copy(data[i:], m.Address)
	}
	if len(m.Annotations) > 0 {
		for k, _ := range m.Annotations {
			data[i] = 0x1a
			i++
			v := m.Annotations[k]
			mapSize := 1 + len(k) + sovPostal(uint64(len(k))) + 1 + len(v) + sovPostal(uint64(len(v)))
			i = encodeVarintPostal(data, i, uint64(mapSize))
			data[i] = 0xa
			i++
			i = encodeVarintPostal(data, i, uint64(len(k)))
			i += copy(data[i:], k)
			data[i] = 0x12
			i++
			i = encodeVarintPostal(data, i, uint64(len(v)))
			i += copy(data[i:], v)
		}
	}
	return i, nil
}

func (m *BindAddressResponse) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *BindAddressResponse) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Binding != nil {
		data[i] = 0xa
		i++
		i = encodeVarintPostal(data, i, uint64(m.Binding.Size()))
		n16, err := m.Binding.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n16
	}
	return i, nil
}

func (m *ReleaseAddressRequest) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *ReleaseAddressRequest) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.PoolID != nil {
		data[i] = 0xa
		i++
		i = encodeVarintPostal(data, i, uint64(m.PoolID.Size()))
		n17, err := m.PoolID.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n17
	}
	if len(m.BindingID) > 0 {
		data[i] = 0x12
		i++
		i = encodeVarintPostal(data, i, uint64(len(m.BindingID)))
		i += copy(data[i:], m.BindingID)
	}
	if len(m.Address) > 0 {
		data[i] = 0x1a
		i++
		i = encodeVarintPostal(data, i, uint64(len(m.Address)))
		i += copy(data[i:], m.Address)
	}
	if m.Hard {
		data[i] = 0x20
		i++
		if m.Hard {
			data[i] = 1
		} else {
			data[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *ReleaseAddressResponse) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *ReleaseAddressResponse) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func encodeFixed64Postal(data []byte, offset int, v uint64) int {
	data[offset] = uint8(v)
	data[offset+1] = uint8(v >> 8)
	data[offset+2] = uint8(v >> 16)
	data[offset+3] = uint8(v >> 24)
	data[offset+4] = uint8(v >> 32)
	data[offset+5] = uint8(v >> 40)
	data[offset+6] = uint8(v >> 48)
	data[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32Postal(data []byte, offset int, v uint32) int {
	data[offset] = uint8(v)
	data[offset+1] = uint8(v >> 8)
	data[offset+2] = uint8(v >> 16)
	data[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintPostal(data []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		data[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	data[offset] = uint8(v)
	return offset + 1
}
func (m *Error) Size() (n int) {
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovPostal(uint64(m.Code))
	}
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovPostal(uint64(l))
	}
	return n
}

func (m *Empty) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *Network) Size() (n int) {
	var l int
	_ = l
	l = len(m.ID)
	if l > 0 {
		n += 1 + l + sovPostal(uint64(l))
	}
	if len(m.Annotations) > 0 {
		for k, v := range m.Annotations {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovPostal(uint64(len(k))) + 1 + len(v) + sovPostal(uint64(len(v)))
			n += mapEntrySize + 1 + sovPostal(uint64(mapEntrySize))
		}
	}
	l = len(m.Cidr)
	if l > 0 {
		n += 1 + l + sovPostal(uint64(l))
	}
	return n
}

func (m *Pool) Size() (n int) {
	var l int
	_ = l
	if m.ID != nil {
		l = m.ID.Size()
		n += 1 + l + sovPostal(uint64(l))
	}
	if len(m.Annotations) > 0 {
		for k, v := range m.Annotations {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovPostal(uint64(len(k))) + 1 + len(v) + sovPostal(uint64(len(v)))
			n += mapEntrySize + 1 + sovPostal(uint64(mapEntrySize))
		}
	}
	if m.MaximumAddresses != 0 {
		n += 1 + sovPostal(uint64(m.MaximumAddresses))
	}
	if m.MinimumAddresses != 0 {
		n += 1 + sovPostal(uint64(m.MinimumAddresses))
	}
	if m.Type != 0 {
		n += 1 + sovPostal(uint64(m.Type))
	}
	return n
}

func (m *Pool_PoolID) Size() (n int) {
	var l int
	_ = l
	l = len(m.NetworkID)
	if l > 0 {
		n += 1 + l + sovPostal(uint64(l))
	}
	l = len(m.ID)
	if l > 0 {
		n += 1 + l + sovPostal(uint64(l))
	}
	return n
}

func (m *Binding) Size() (n int) {
	var l int
	_ = l
	if m.PoolID != nil {
		l = m.PoolID.Size()
		n += 1 + l + sovPostal(uint64(l))
	}
	l = len(m.ID)
	if l > 0 {
		n += 1 + l + sovPostal(uint64(l))
	}
	if len(m.Annotations) > 0 {
		for k, v := range m.Annotations {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovPostal(uint64(len(k))) + 1 + len(v) + sovPostal(uint64(len(v)))
			n += mapEntrySize + 1 + sovPostal(uint64(mapEntrySize))
		}
	}
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovPostal(uint64(l))
	}
	if m.AllocateTime != 0 {
		n += 1 + sovPostal(uint64(m.AllocateTime))
	}
	if m.BindTime != 0 {
		n += 1 + sovPostal(uint64(m.BindTime))
	}
	if m.ReleaseTime != 0 {
		n += 1 + sovPostal(uint64(m.ReleaseTime))
	}
	return n
}

func (m *NetworkRangeRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.ID)
	if l > 0 {
		n += 1 + l + sovPostal(uint64(l))
	}
	if m.Size_ != 0 {
		n += 1 + sovPostal(uint64(m.Size_))
	}
	if len(m.Filters) > 0 {
		for k, v := range m.Filters {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovPostal(uint64(len(k))) + 1 + len(v) + sovPostal(uint64(len(v)))
			n += mapEntrySize + 1 + sovPostal(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *NetworkRangeResponse) Size() (n int) {
	var l int
	_ = l
	if len(m.Networks) > 0 {
		for _, e := range m.Networks {
			l = e.Size()
			n += 1 + l + sovPostal(uint64(l))
		}
	}
	if m.Size_ != 0 {
		n += 1 + sovPostal(uint64(m.Size_))
	}
	return n
}

func (m *NetworkAddRequest) Size() (n int) {
	var l int
	_ = l
	if len(m.Annotations) > 0 {
		for k, v := range m.Annotations {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovPostal(uint64(len(k))) + 1 + len(v) + sovPostal(uint64(len(v)))
			n += mapEntrySize + 1 + sovPostal(uint64(mapEntrySize))
		}
	}
	l = len(m.Cidr)
	if l > 0 {
		n += 1 + l + sovPostal(uint64(l))
	}
	return n
}

func (m *NetworkAddResponse) Size() (n int) {
	var l int
	_ = l
	if m.Network != nil {
		l = m.Network.Size()
		n += 1 + l + sovPostal(uint64(l))
	}
	return n
}

func (m *NetworkRemoveRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.ID)
	if l > 0 {
		n += 1 + l + sovPostal(uint64(l))
	}
	return n
}

func (m *NetworkRemoveResponse) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *PoolRangeRequest) Size() (n int) {
	var l int
	_ = l
	if m.ID != nil {
		l = m.ID.Size()
		n += 1 + l + sovPostal(uint64(l))
	}
	if m.Size_ != 0 {
		n += 1 + sovPostal(uint64(m.Size_))
	}
	if len(m.Filters) > 0 {
		for k, v := range m.Filters {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovPostal(uint64(len(k))) + 1 + len(v) + sovPostal(uint64(len(v)))
			n += mapEntrySize + 1 + sovPostal(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *PoolRangeResponse) Size() (n int) {
	var l int
	_ = l
	if len(m.Pools) > 0 {
		for _, e := range m.Pools {
			l = e.Size()
			n += 1 + l + sovPostal(uint64(l))
		}
	}
	if m.Size_ != 0 {
		n += 1 + sovPostal(uint64(m.Size_))
	}
	return n
}

func (m *PoolAddRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.NetworkID)
	if l > 0 {
		n += 1 + l + sovPostal(uint64(l))
	}
	if len(m.Annotations) > 0 {
		for k, v := range m.Annotations {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovPostal(uint64(len(k))) + 1 + len(v) + sovPostal(uint64(len(v)))
			n += mapEntrySize + 1 + sovPostal(uint64(mapEntrySize))
		}
	}
	if m.Maximum != 0 {
		n += 1 + sovPostal(uint64(m.Maximum))
	}
	if m.Type != 0 {
		n += 1 + sovPostal(uint64(m.Type))
	}
	return n
}

func (m *PoolAddResponse) Size() (n int) {
	var l int
	_ = l
	if m.Pool != nil {
		l = m.Pool.Size()
		n += 1 + l + sovPostal(uint64(l))
	}
	return n
}

func (m *PoolRemoveRequest) Size() (n int) {
	var l int
	_ = l
	if m.ID != nil {
		l = m.ID.Size()
		n += 1 + l + sovPostal(uint64(l))
	}
	return n
}

func (m *PoolRemoveResponse) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *PoolSetMinMaxRequest) Size() (n int) {
	var l int
	_ = l
	if m.ID != nil {
		l = m.ID.Size()
		n += 1 + l + sovPostal(uint64(l))
	}
	if m.Maximum != 0 {
		n += 1 + sovPostal(uint64(m.Maximum))
	}
	return n
}

func (m *PoolSetMinMaxResponse) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *LookupBindingRequest) Size() (n int) {
	var l int
	_ = l
	if m.LookupMethod != nil {
		n += m.LookupMethod.Size()
	}
	return n
}

func (m *LookupBindingRequest_ById) Size() (n int) {
	var l int
	_ = l
	if m.ById != nil {
		l = m.ById.Size()
		n += 1 + l + sovPostal(uint64(l))
	}
	return n
}
func (m *LookupBindingRequest_ByAddress) Size() (n int) {
	var l int
	_ = l
	if m.ByAddress != nil {
		l = m.ByAddress.Size()
		n += 1 + l + sovPostal(uint64(l))
	}
	return n
}
func (m *LookupBindingRequest_ByIDMethod) Size() (n int) {
	var l int
	_ = l
	if m.PoolID != nil {
		l = m.PoolID.Size()
		n += 1 + l + sovPostal(uint64(l))
	}
	l = len(m.ID)
	if l > 0 {
		n += 1 + l + sovPostal(uint64(l))
	}
	return n
}

func (m *LookupBindingRequest_ByAddressMethod) Size() (n int) {
	var l int
	_ = l
	l = len(m.NetworkID)
	if l > 0 {
		n += 1 + l + sovPostal(uint64(l))
	}
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovPostal(uint64(l))
	}
	return n
}

func (m *LookupBindingResponse) Size() (n int) {
	var l int
	_ = l
	if m.Binding != nil {
		l = m.Binding.Size()
		n += 1 + l + sovPostal(uint64(l))
	}
	return n
}

func (m *AllocateAddressRequest) Size() (n int) {
	var l int
	_ = l
	if m.PoolID != nil {
		l = m.PoolID.Size()
		n += 1 + l + sovPostal(uint64(l))
	}
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovPostal(uint64(l))
	}
	return n
}

func (m *AllocateAddressResponse) Size() (n int) {
	var l int
	_ = l
	if m.Binding != nil {
		l = m.Binding.Size()
		n += 1 + l + sovPostal(uint64(l))
	}
	return n
}

func (m *BindAddressRequest) Size() (n int) {
	var l int
	_ = l
	if m.PoolID != nil {
		l = m.PoolID.Size()
		n += 1 + l + sovPostal(uint64(l))
	}
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovPostal(uint64(l))
	}
	if len(m.Annotations) > 0 {
		for k, v := range m.Annotations {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovPostal(uint64(len(k))) + 1 + len(v) + sovPostal(uint64(len(v)))
			n += mapEntrySize + 1 + sovPostal(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *BindAddressResponse) Size() (n int) {
	var l int
	_ = l
	if m.Binding != nil {
		l = m.Binding.Size()
		n += 1 + l + sovPostal(uint64(l))
	}
	return n
}

func (m *ReleaseAddressRequest) Size() (n int) {
	var l int
	_ = l
	if m.PoolID != nil {
		l = m.PoolID.Size()
		n += 1 + l + sovPostal(uint64(l))
	}
	l = len(m.BindingID)
	if l > 0 {
		n += 1 + l + sovPostal(uint64(l))
	}
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovPostal(uint64(l))
	}
	if m.Hard {
		n += 2
	}
	return n
}

func (m *ReleaseAddressResponse) Size() (n int) {
	var l int
	_ = l
	return n
}

func sovPostal(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozPostal(x uint64) (n int) {
	return sovPostal(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Error) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPostal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Error: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Error: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPostal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.Code |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPostal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPostal
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPostal(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPostal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Empty) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPostal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Empty: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Empty: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipPostal(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPostal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Network) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPostal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Network: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Network: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPostal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPostal
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ID = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Annotations", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPostal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPostal
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var keykey uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPostal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				keykey |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			var stringLenmapkey uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPostal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLenmapkey |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLenmapkey := int(stringLenmapkey)
			if intStringLenmapkey < 0 {
				return ErrInvalidLengthPostal
			}
			postStringIndexmapkey := iNdEx + intStringLenmapkey
			if postStringIndexmapkey > l {
				return io.ErrUnexpectedEOF
			}
			mapkey := string(data[iNdEx:postStringIndexmapkey])
			iNdEx = postStringIndexmapkey
			var valuekey uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPostal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				valuekey |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			var stringLenmapvalue uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPostal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLenmapvalue |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLenmapvalue := int(stringLenmapvalue)
			if intStringLenmapvalue < 0 {
				return ErrInvalidLengthPostal
			}
			postStringIndexmapvalue := iNdEx + intStringLenmapvalue
			if postStringIndexmapvalue > l {
				return io.ErrUnexpectedEOF
			}
			mapvalue := string(data[iNdEx:postStringIndexmapvalue])
			iNdEx = postStringIndexmapvalue
			if m.Annotations == nil {
				m.Annotations = make(map[string]string)
			}
			m.Annotations[mapkey] = mapvalue
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cidr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPostal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPostal
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Cidr = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPostal(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPostal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Pool) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPostal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Pool: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Pool: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPostal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPostal
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ID == nil {
				m.ID = &Pool_PoolID{}
			}
			if err := m.ID.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Annotations", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPostal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPostal
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var keykey uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPostal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				keykey |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			var stringLenmapkey uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPostal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLenmapkey |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLenmapkey := int(stringLenmapkey)
			if intStringLenmapkey < 0 {
				return ErrInvalidLengthPostal
			}
			postStringIndexmapkey := iNdEx + intStringLenmapkey
			if postStringIndexmapkey > l {
				return io.ErrUnexpectedEOF
			}
			mapkey := string(data[iNdEx:postStringIndexmapkey])
			iNdEx = postStringIndexmapkey
			var valuekey uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPostal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				valuekey |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			var stringLenmapvalue uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPostal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLenmapvalue |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLenmapvalue := int(stringLenmapvalue)
			if intStringLenmapvalue < 0 {
				return ErrInvalidLengthPostal
			}
			postStringIndexmapvalue := iNdEx + intStringLenmapvalue
			if postStringIndexmapvalue > l {
				return io.ErrUnexpectedEOF
			}
			mapvalue := string(data[iNdEx:postStringIndexmapvalue])
			iNdEx = postStringIndexmapvalue
			if m.Annotations == nil {
				m.Annotations = make(map[string]string)
			}
			m.Annotations[mapkey] = mapvalue
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaximumAddresses", wireType)
			}
			m.MaximumAddresses = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPostal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.MaximumAddresses |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinimumAddresses", wireType)
			}
			m.MinimumAddresses = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPostal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.MinimumAddresses |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPostal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.Type |= (Pool_Type(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPostal(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPostal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Pool_PoolID) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPostal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PoolID: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PoolID: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NetworkID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPostal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPostal
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NetworkID = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPostal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPostal
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ID = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPostal(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPostal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Binding) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPostal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Binding: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Binding: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PoolID", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPostal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPostal
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PoolID == nil {
				m.PoolID = &Pool_PoolID{}
			}
			if err := m.PoolID.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPostal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPostal
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ID = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Annotations", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPostal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPostal
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var keykey uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPostal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				keykey |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			var stringLenmapkey uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPostal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLenmapkey |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLenmapkey := int(stringLenmapkey)
			if intStringLenmapkey < 0 {
				return ErrInvalidLengthPostal
			}
			postStringIndexmapkey := iNdEx + intStringLenmapkey
			if postStringIndexmapkey > l {
				return io.ErrUnexpectedEOF
			}
			mapkey := string(data[iNdEx:postStringIndexmapkey])
			iNdEx = postStringIndexmapkey
			var valuekey uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPostal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				valuekey |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			var stringLenmapvalue uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPostal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLenmapvalue |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLenmapvalue := int(stringLenmapvalue)
			if intStringLenmapvalue < 0 {
				return ErrInvalidLengthPostal
			}
			postStringIndexmapvalue := iNdEx + intStringLenmapvalue
			if postStringIndexmapvalue > l {
				return io.ErrUnexpectedEOF
			}
			mapvalue := string(data[iNdEx:postStringIndexmapvalue])
			iNdEx = postStringIndexmapvalue
			if m.Annotations == nil {
				m.Annotations = make(map[string]string)
			}
			m.Annotations[mapkey] = mapvalue
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPostal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPostal
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AllocateTime", wireType)
			}
			m.AllocateTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPostal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.AllocateTime |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BindTime", wireType)
			}
			m.BindTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPostal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.BindTime |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReleaseTime", wireType)
			}
			m.ReleaseTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPostal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.ReleaseTime |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPostal(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPostal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NetworkRangeRequest) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPostal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NetworkRangeRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NetworkRangeRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPostal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPostal
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ID = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Size_", wireType)
			}
			m.Size_ = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPostal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.Size_ |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Filters", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPostal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPostal
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var keykey uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPostal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				keykey |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			var stringLenmapkey uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPostal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLenmapkey |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLenmapkey := int(stringLenmapkey)
			if intStringLenmapkey < 0 {
				return ErrInvalidLengthPostal
			}
			postStringIndexmapkey := iNdEx + intStringLenmapkey
			if postStringIndexmapkey > l {
				return io.ErrUnexpectedEOF
			}
			mapkey := string(data[iNdEx:postStringIndexmapkey])
			iNdEx = postStringIndexmapkey
			var valuekey uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPostal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				valuekey |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			var stringLenmapvalue uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPostal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLenmapvalue |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLenmapvalue := int(stringLenmapvalue)
			if intStringLenmapvalue < 0 {
				return ErrInvalidLengthPostal
			}
			postStringIndexmapvalue := iNdEx + intStringLenmapvalue
			if postStringIndexmapvalue > l {
				return io.ErrUnexpectedEOF
			}
			mapvalue := string(data[iNdEx:postStringIndexmapvalue])
			iNdEx = postStringIndexmapvalue
			if m.Filters == nil {
				m.Filters = make(map[string]string)
			}
			m.Filters[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPostal(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPostal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NetworkRangeResponse) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPostal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NetworkRangeResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NetworkRangeResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Networks", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPostal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPostal
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Networks = append(m.Networks, &Network{})
			if err := m.Networks[len(m.Networks)-1].Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Size_", wireType)
			}
			m.Size_ = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPostal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.Size_ |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPostal(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPostal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NetworkAddRequest) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPostal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NetworkAddRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NetworkAddRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Annotations", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPostal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPostal
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var keykey uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPostal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				keykey |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			var stringLenmapkey uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPostal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLenmapkey |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLenmapkey := int(stringLenmapkey)
			if intStringLenmapkey < 0 {
				return ErrInvalidLengthPostal
			}
			postStringIndexmapkey := iNdEx + intStringLenmapkey
			if postStringIndexmapkey > l {
				return io.ErrUnexpectedEOF
			}
			mapkey := string(data[iNdEx:postStringIndexmapkey])
			iNdEx = postStringIndexmapkey
			var valuekey uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPostal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				valuekey |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			var stringLenmapvalue uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPostal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLenmapvalue |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLenmapvalue := int(stringLenmapvalue)
			if intStringLenmapvalue < 0 {
				return ErrInvalidLengthPostal
			}
			postStringIndexmapvalue := iNdEx + intStringLenmapvalue
			if postStringIndexmapvalue > l {
				return io.ErrUnexpectedEOF
			}
			mapvalue := string(data[iNdEx:postStringIndexmapvalue])
			iNdEx = postStringIndexmapvalue
			if m.Annotations == nil {
				m.Annotations = make(map[string]string)
			}
			m.Annotations[mapkey] = mapvalue
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cidr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPostal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPostal
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Cidr = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPostal(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPostal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NetworkAddResponse) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPostal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NetworkAddResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NetworkAddResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Network", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPostal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPostal
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Network == nil {
				m.Network = &Network{}
			}
			if err := m.Network.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPostal(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPostal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NetworkRemoveRequest) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPostal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NetworkRemoveRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NetworkRemoveRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPostal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPostal
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ID = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPostal(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPostal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NetworkRemoveResponse) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPostal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NetworkRemoveResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NetworkRemoveResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipPostal(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPostal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PoolRangeRequest) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPostal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PoolRangeRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PoolRangeRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPostal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPostal
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ID == nil {
				m.ID = &Pool_PoolID{}
			}
			if err := m.ID.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Size_", wireType)
			}
			m.Size_ = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPostal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.Size_ |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Filters", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPostal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPostal
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var keykey uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPostal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				keykey |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			var stringLenmapkey uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPostal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLenmapkey |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLenmapkey := int(stringLenmapkey)
			if intStringLenmapkey < 0 {
				return ErrInvalidLengthPostal
			}
			postStringIndexmapkey := iNdEx + intStringLenmapkey
			if postStringIndexmapkey > l {
				return io.ErrUnexpectedEOF
			}
			mapkey := string(data[iNdEx:postStringIndexmapkey])
			iNdEx = postStringIndexmapkey
			var valuekey uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPostal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				valuekey |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			var stringLenmapvalue uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPostal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLenmapvalue |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLenmapvalue := int(stringLenmapvalue)
			if intStringLenmapvalue < 0 {
				return ErrInvalidLengthPostal
			}
			postStringIndexmapvalue := iNdEx + intStringLenmapvalue
			if postStringIndexmapvalue > l {
				return io.ErrUnexpectedEOF
			}
			mapvalue := string(data[iNdEx:postStringIndexmapvalue])
			iNdEx = postStringIndexmapvalue
			if m.Filters == nil {
				m.Filters = make(map[string]string)
			}
			m.Filters[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPostal(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPostal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PoolRangeResponse) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPostal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PoolRangeResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PoolRangeResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pools", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPostal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPostal
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Pools = append(m.Pools, &Pool{})
			if err := m.Pools[len(m.Pools)-1].Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Size_", wireType)
			}
			m.Size_ = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPostal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.Size_ |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPostal(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPostal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PoolAddRequest) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPostal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PoolAddRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PoolAddRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NetworkID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPostal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPostal
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NetworkID = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Annotations", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPostal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPostal
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var keykey uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPostal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				keykey |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			var stringLenmapkey uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPostal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLenmapkey |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLenmapkey := int(stringLenmapkey)
			if intStringLenmapkey < 0 {
				return ErrInvalidLengthPostal
			}
			postStringIndexmapkey := iNdEx + intStringLenmapkey
			if postStringIndexmapkey > l {
				return io.ErrUnexpectedEOF
			}
			mapkey := string(data[iNdEx:postStringIndexmapkey])
			iNdEx = postStringIndexmapkey
			var valuekey uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPostal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				valuekey |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			var stringLenmapvalue uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPostal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLenmapvalue |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLenmapvalue := int(stringLenmapvalue)
			if intStringLenmapvalue < 0 {
				return ErrInvalidLengthPostal
			}
			postStringIndexmapvalue := iNdEx + intStringLenmapvalue
			if postStringIndexmapvalue > l {
				return io.ErrUnexpectedEOF
			}
			mapvalue := string(data[iNdEx:postStringIndexmapvalue])
			iNdEx = postStringIndexmapvalue
			if m.Annotations == nil {
				m.Annotations = make(map[string]string)
			}
			m.Annotations[mapkey] = mapvalue
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Maximum", wireType)
			}
			m.Maximum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPostal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.Maximum |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPostal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.Type |= (Pool_Type(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPostal(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPostal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PoolAddResponse) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPostal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PoolAddResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PoolAddResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pool", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPostal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPostal
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pool == nil {
				m.Pool = &Pool{}
			}
			if err := m.Pool.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPostal(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPostal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PoolRemoveRequest) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPostal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PoolRemoveRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PoolRemoveRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPostal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPostal
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ID == nil {
				m.ID = &Pool_PoolID{}
			}
			if err := m.ID.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPostal(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPostal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PoolRemoveResponse) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPostal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PoolRemoveResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PoolRemoveResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipPostal(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPostal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PoolSetMinMaxRequest) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPostal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PoolSetMinMaxRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PoolSetMinMaxRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPostal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPostal
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ID == nil {
				m.ID = &Pool_PoolID{}
			}
			if err := m.ID.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Maximum", wireType)
			}
			m.Maximum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPostal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.Maximum |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPostal(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPostal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PoolSetMinMaxResponse) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPostal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PoolSetMinMaxResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PoolSetMinMaxResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipPostal(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPostal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LookupBindingRequest) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPostal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LookupBindingRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LookupBindingRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ById", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPostal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPostal
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &LookupBindingRequest_ByIDMethod{}
			if err := v.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			m.LookupMethod = &LookupBindingRequest_ById{v}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ByAddress", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPostal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPostal
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &LookupBindingRequest_ByAddressMethod{}
			if err := v.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			m.LookupMethod = &LookupBindingRequest_ByAddress{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPostal(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPostal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LookupBindingRequest_ByIDMethod) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPostal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ByIDMethod: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ByIDMethod: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PoolID", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPostal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPostal
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PoolID == nil {
				m.PoolID = &Pool_PoolID{}
			}
			if err := m.PoolID.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPostal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPostal
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ID = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPostal(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPostal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LookupBindingRequest_ByAddressMethod) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPostal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ByAddressMethod: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ByAddressMethod: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NetworkID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPostal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPostal
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NetworkID = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPostal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPostal
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPostal(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPostal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LookupBindingResponse) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPostal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LookupBindingResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LookupBindingResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Binding", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPostal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPostal
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Binding == nil {
				m.Binding = &Binding{}
			}
			if err := m.Binding.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPostal(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPostal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AllocateAddressRequest) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPostal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AllocateAddressRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AllocateAddressRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PoolID", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPostal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPostal
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PoolID == nil {
				m.PoolID = &Pool_PoolID{}
			}
			if err := m.PoolID.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPostal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPostal
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPostal(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPostal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AllocateAddressResponse) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPostal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AllocateAddressResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AllocateAddressResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Binding", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPostal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPostal
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Binding == nil {
				m.Binding = &Binding{}
			}
			if err := m.Binding.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPostal(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPostal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BindAddressRequest) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPostal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BindAddressRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BindAddressRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PoolID", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPostal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPostal
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PoolID == nil {
				m.PoolID = &Pool_PoolID{}
			}
			if err := m.PoolID.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPostal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPostal
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Annotations", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPostal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPostal
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var keykey uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPostal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				keykey |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			var stringLenmapkey uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPostal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLenmapkey |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLenmapkey := int(stringLenmapkey)
			if intStringLenmapkey < 0 {
				return ErrInvalidLengthPostal
			}
			postStringIndexmapkey := iNdEx + intStringLenmapkey
			if postStringIndexmapkey > l {
				return io.ErrUnexpectedEOF
			}
			mapkey := string(data[iNdEx:postStringIndexmapkey])
			iNdEx = postStringIndexmapkey
			var valuekey uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPostal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				valuekey |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			var stringLenmapvalue uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPostal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLenmapvalue |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLenmapvalue := int(stringLenmapvalue)
			if intStringLenmapvalue < 0 {
				return ErrInvalidLengthPostal
			}
			postStringIndexmapvalue := iNdEx + intStringLenmapvalue
			if postStringIndexmapvalue > l {
				return io.ErrUnexpectedEOF
			}
			mapvalue := string(data[iNdEx:postStringIndexmapvalue])
			iNdEx = postStringIndexmapvalue
			if m.Annotations == nil {
				m.Annotations = make(map[string]string)
			}
			m.Annotations[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPostal(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPostal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BindAddressResponse) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPostal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BindAddressResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BindAddressResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Binding", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPostal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPostal
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Binding == nil {
				m.Binding = &Binding{}
			}
			if err := m.Binding.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPostal(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPostal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReleaseAddressRequest) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPostal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReleaseAddressRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReleaseAddressRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PoolID", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPostal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPostal
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PoolID == nil {
				m.PoolID = &Pool_PoolID{}
			}
			if err := m.PoolID.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BindingID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPostal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPostal
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BindingID = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPostal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPostal
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hard", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPostal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Hard = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipPostal(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPostal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReleaseAddressResponse) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPostal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReleaseAddressResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReleaseAddressResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipPostal(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPostal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipPostal(data []byte) (n int, err error) {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowPostal
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPostal
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if data[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPostal
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthPostal
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowPostal
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := data[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipPostal(data[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthPostal = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowPostal   = fmt.Errorf("proto: integer overflow")
)

var fileDescriptorPostal = []byte{
	// 1091 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xac, 0x57, 0x4f, 0x73, 0xdb, 0x44,
	0x14, 0x8f, 0xfc, 0x27, 0x8e, 0x9f, 0x1d, 0xc7, 0xd9, 0x38, 0xb1, 0xab, 0xa6, 0x99, 0x8e, 0x06,
	0x48, 0x80, 0x19, 0x65, 0x70, 0xda, 0x4e, 0x09, 0x74, 0x20, 0x89, 0x93, 0xc1, 0x43, 0xd3, 0x61,
	0x42, 0x0f, 0x70, 0x62, 0xe4, 0x78, 0x9b, 0x88, 0xd8, 0x92, 0x91, 0xe4, 0x10, 0xf3, 0x15, 0x38,
	0x31, 0x1c, 0xe0, 0x0e, 0x9f, 0x82, 0x1b, 0x37, 0x8e, 0x7c, 0x04, 0x06, 0xce, 0xfd, 0x0e, 0xac,
	0xb4, 0x4f, 0xd2, 0xae, 0xbc, 0x49, 0x53, 0xc3, 0xc1, 0x1e, 0xfb, 0xed, 0x7b, 0xbf, 0xf7, 0x77,
	0x7f, 0x4f, 0x82, 0xcd, 0x33, 0x3b, 0x38, 0x1f, 0xf7, 0xcc, 0x53, 0x77, 0xb8, 0xfd, 0xb5, 0x7d,
	0x49, 0xb7, 0x47, 0xae, 0x1f, 0x58, 0x83, 0x6d, 0x6b, 0x64, 0xe3, 0x4f, 0x73, 0xe4, 0xb9, 0x81,
	0x4b, 0xf2, 0x4c, 0x62, 0xbc, 0x05, 0xc5, 0x43, 0xcf, 0x73, 0x3d, 0x52, 0x85, 0xc2, 0xa9, 0xdb,
	0xa7, 0x2d, 0xed, 0xbe, 0xb6, 0xb5, 0x48, 0x96, 0xa0, 0x34, 0xa4, 0xbe, 0x6f, 0x9d, 0xd1, 0x56,
	0x8e, 0x09, 0xca, 0x46, 0x89, 0xe9, 0x0d, 0x47, 0xc1, 0xc4, 0xf8, 0x5e, 0x83, 0xd2, 0x33, 0x1a,
	0x7c, 0xeb, 0x7a, 0x17, 0x04, 0x20, 0xd7, 0xed, 0x44, 0x16, 0x65, 0xd2, 0x86, 0x8a, 0xe5, 0x38,
	0x6e, 0x60, 0x05, 0xb6, 0xeb, 0xf8, 0xcc, 0x2a, 0xbf, 0x55, 0x69, 0xdf, 0x33, 0x99, 0x0f, 0x13,
	0xd5, 0xcd, 0xbd, 0xf4, 0xfc, 0xd0, 0x09, 0xbc, 0x49, 0xe4, 0xd3, 0xee, 0x7b, 0xad, 0x7c, 0x88,
	0xa0, 0xb7, 0xa1, 0x3e, 0xa5, 0x51, 0x81, 0xfc, 0x05, 0x9d, 0xa0, 0x8b, 0x45, 0x28, 0x5e, 0x5a,
	0x83, 0x31, 0x86, 0xb4, 0x9b, 0x7b, 0xac, 0x19, 0xbf, 0xe6, 0xa0, 0xf0, 0x99, 0xeb, 0x0e, 0xc8,
	0x7a, 0x12, 0x4a, 0xa5, 0x5d, 0x8f, 0xbc, 0x86, 0xe2, 0xe8, 0xab, 0xdb, 0x21, 0xdb, 0xaa, 0xe0,
	0xf4, 0x54, 0x6d, 0xca, 0x6f, 0x0b, 0xea, 0x43, 0xeb, 0xca, 0x1e, 0x8e, 0x87, 0x7b, 0xfd, 0xbe,
	0xc7, 0x2a, 0x41, 0xfd, 0x28, 0xca, 0x62, 0x74, 0x62, 0x3b, 0xf2, 0x49, 0x21, 0x3a, 0x59, 0x87,
	0x42, 0x30, 0x19, 0xd1, 0x56, 0x91, 0xfd, 0xab, 0xb5, 0x6b, 0x29, 0xfa, 0x73, 0x26, 0xd5, 0x37,
	0x61, 0x1e, 0x83, 0x59, 0x86, 0xb2, 0xc3, 0x2b, 0x92, 0x14, 0x8f, 0x17, 0x32, 0x37, 0x73, 0x19,
	0x36, 0xa0, 0x10, 0x3a, 0x61, 0x7a, 0xa5, 0xce, 0x97, 0xcf, 0xf6, 0x8e, 0xbb, 0x07, 0xf5, 0x39,
	0x52, 0x86, 0xe2, 0x51, 0xf7, 0x8b, 0xc3, 0x4e, 0x5d, 0x33, 0x5e, 0xb2, 0xa6, 0xed, 0xdb, 0x4e,
	0xdf, 0x76, 0xce, 0xc8, 0x7d, 0x98, 0x1f, 0x45, 0x81, 0x5c, 0x5b, 0x2d, 0x21, 0x9a, 0x6c, 0x5b,
	0xf3, 0x42, 0x5b, 0x11, 0x70, 0xba, 0x78, 0x6c, 0x78, 0x2c, 0x5e, 0x9b, 0xa8, 0x32, 0x65, 0xd2,
	0x80, 0xaa, 0x35, 0x18, 0xb8, 0xa7, 0x56, 0x40, 0x9f, 0xdb, 0x43, 0x5e, 0xa1, 0x3c, 0xa9, 0xc3,
	0x42, 0x8f, 0x41, 0x44, 0x92, 0xf9, 0x48, 0xb2, 0x02, 0x15, 0x8f, 0x0e, 0xa8, 0xe5, 0x73, 0xb5,
	0x52, 0x28, 0x9c, 0xa9, 0x1e, 0x3f, 0x69, 0xb0, 0x82, 0x53, 0x77, 0x62, 0x39, 0x67, 0xf4, 0x84,
	0x7e, 0x33, 0xa6, 0x7e, 0x20, 0x0d, 0x2c, 0x1b, 0x3e, 0xdf, 0xfe, 0x8e, 0x5b, 0x15, 0xc9, 0x23,
	0x28, 0xbd, 0xb0, 0x07, 0x01, 0xf5, 0xe2, 0x1c, 0xdf, 0x14, 0x47, 0x57, 0x04, 0x31, 0x8f, 0xb8,
	0x5e, 0x14, 0x89, 0x6e, 0x42, 0x55, 0xfc, 0xff, 0xca, 0xc8, 0x3a, 0xd0, 0x90, 0x31, 0xfd, 0x11,
	0xcb, 0x8a, 0x92, 0x0d, 0x58, 0xc0, 0xa1, 0xf0, 0x99, 0x71, 0x18, 0x40, 0x55, 0x0c, 0x40, 0x8e,
	0xd6, 0xf8, 0x51, 0x83, 0x65, 0x3c, 0x61, 0x53, 0x18, 0x67, 0xf7, 0xa1, 0xdc, 0x2b, 0x0e, 0xb3,
	0x29, 0xc2, 0xa4, 0xca, 0xd7, 0x5f, 0xc6, 0xd9, 0xa7, 0x70, 0x07, 0x88, 0xe8, 0x07, 0x33, 0xbb,
	0x07, 0x25, 0xcc, 0x0c, 0x07, 0x4e, 0x4a, 0xcc, 0x30, 0xd2, 0x82, 0xd0, 0xa1, 0x7b, 0xa9, 0x6a,
	0x95, 0xd1, 0x84, 0xd5, 0x8c, 0x0e, 0xc7, 0x36, 0x7e, 0xd1, 0xa0, 0x1e, 0x0e, 0xad, 0xd4, 0xe4,
	0x9b, 0xa9, 0x40, 0x6e, 0xfb, 0x4e, 0xb6, 0xed, 0x46, 0x62, 0xf0, 0xff, 0xf5, 0xfc, 0x03, 0x58,
	0x16, 0x00, 0xb1, 0x2c, 0x2d, 0x28, 0x86, 0xd7, 0x30, 0x6e, 0x53, 0x39, 0xf1, 0x9b, 0x69, 0xf5,
	0xef, 0x1a, 0xd4, 0x42, 0xb1, 0xd0, 0x67, 0x05, 0x81, 0xbc, 0xaf, 0x22, 0xb8, 0x37, 0x12, 0xcc,
	0x9b, 0xfa, 0x1e, 0x52, 0x3d, 0xa7, 0x3a, 0x64, 0xb8, 0x98, 0xc7, 0x0a, 0x4a, 0x1e, 0x9b, 0x65,
	0x30, 0xde, 0x81, 0xa5, 0x24, 0x0a, 0x4c, 0xbf, 0x09, 0x85, 0x30, 0x7d, 0x6c, 0x53, 0x9a, 0xbd,
	0xf1, 0x1e, 0x16, 0x4b, 0x1a, 0x86, 0x1b, 0x5b, 0x6a, 0x34, 0x80, 0x88, 0x26, 0x38, 0x1b, 0x87,
	0xd0, 0x08, 0xa5, 0x9f, 0xd3, 0xe0, 0xd8, 0x76, 0x8e, 0xad, 0xab, 0xdb, 0x8d, 0x87, 0x50, 0x0d,
	0x5e, 0x7f, 0x36, 0x7b, 0x19, 0x18, 0xc4, 0xff, 0x21, 0x07, 0x8d, 0xa7, 0xae, 0x7b, 0x31, 0x1e,
	0x21, 0x11, 0xc6, 0x0e, 0x1e, 0x42, 0xb1, 0x37, 0xf9, 0xca, 0xee, 0xa3, 0x0f, 0xde, 0x05, 0x95,
	0xa6, 0xb9, 0x3f, 0xe9, 0x76, 0x8e, 0x69, 0x70, 0xee, 0xf6, 0x3f, 0x99, 0x23, 0x1f, 0x01, 0x30,
	0xb3, 0x98, 0x38, 0x73, 0x91, 0xed, 0xdb, 0x37, 0xd9, 0xe2, 0xfe, 0x89, 0x01, 0xf4, 0x5d, 0x80,
	0x14, 0xf0, 0xf5, 0x68, 0x5e, 0x7f, 0x08, 0x4b, 0x19, 0x40, 0xd5, 0x94, 0x09, 0xc4, 0x1e, 0x99,
	0xed, 0xd7, 0xa0, 0xca, 0x83, 0xe3, 0x36, 0xc6, 0x23, 0x58, 0xcd, 0x04, 0x9b, 0x92, 0x40, 0x8f,
	0x8b, 0x24, 0x12, 0x40, 0x35, 0xe3, 0x53, 0x58, 0xdb, 0xc3, 0x05, 0x81, 0x41, 0xc4, 0xc5, 0x7c,
	0x75, 0x1a, 0xd9, 0xa0, 0x8c, 0xc7, 0xd0, 0x9c, 0x02, 0xbb, 0x5d, 0x18, 0xbf, 0x69, 0x40, 0xc2,
	0xdf, 0xff, 0x39, 0x06, 0xf2, 0x44, 0xb5, 0x36, 0xb7, 0x12, 0x67, 0xb2, 0x83, 0xa9, 0x3b, 0x39,
	0xd3, 0x25, 0x7b, 0x00, 0x2b, 0x12, 0xf4, 0xed, 0x52, 0xbe, 0x80, 0xd5, 0x13, 0xbe, 0x72, 0x5f,
	0x3b, 0x69, 0x36, 0x20, 0x88, 0x9c, 0x3c, 0x2d, 0x08, 0x75, 0xc8, 0xc7, 0x4b, 0xf6, 0xdc, 0xf2,
	0xfa, 0x11, 0x97, 0x2c, 0x18, 0x2d, 0x58, 0xcb, 0x3a, 0xe3, 0x51, 0xb6, 0x5f, 0x16, 0xc3, 0xc7,
	0xa3, 0xf0, 0xe1, 0x94, 0x1c, 0x40, 0x55, 0xdc, 0x90, 0xa4, 0x75, 0xdd, 0x22, 0xd6, 0xef, 0x28,
	0x4e, 0x30, 0xeb, 0x27, 0x00, 0xe9, 0x2a, 0x22, 0x6b, 0xea, 0x1d, 0xa8, 0x37, 0xa7, 0xe4, 0x68,
	0x7e, 0x04, 0x8b, 0xd2, 0xc2, 0x21, 0xb2, 0x2b, 0x91, 0x9b, 0x74, 0x5d, 0x75, 0x84, 0x38, 0xbb,
	0x50, 0x4e, 0x98, 0x9f, 0xac, 0x2a, 0x57, 0x8b, 0xbe, 0x96, 0x15, 0xa3, 0xed, 0x03, 0x28, 0x21,
	0x69, 0x92, 0x15, 0x05, 0x91, 0xeb, 0x0d, 0x59, 0x98, 0x26, 0x9e, 0x72, 0x21, 0x11, 0xb0, 0xa5,
	0x98, 0x9b, 0x53, 0x72, 0x34, 0x3f, 0xe0, 0xe6, 0x21, 0xdb, 0x59, 0x57, 0x98, 0xb5, 0x8a, 0x45,
	0x75, 0x5d, 0x75, 0x94, 0x56, 0x4f, 0x62, 0x01, 0xc4, 0x51, 0xd1, 0x18, 0xe2, 0xa8, 0x49, 0xe3,
	0x29, 0x2c, 0x65, 0x2e, 0x32, 0xb9, 0x1b, 0xa9, 0xab, 0xb9, 0x42, 0x5f, 0x57, 0x1f, 0x22, 0xda,
	0xc7, 0x50, 0x11, 0xee, 0x07, 0x69, 0x5e, 0x73, 0x19, 0xf5, 0xd6, 0xf4, 0x01, 0x22, 0x74, 0xa1,
	0x26, 0x8f, 0x2f, 0xe1, 0xd1, 0x2b, 0x2f, 0x90, 0x7e, 0x57, 0x79, 0xc6, 0xa1, 0xf6, 0xdf, 0xfd,
	0xe3, 0xef, 0x0d, 0xed, 0x4f, 0xf6, 0xf9, 0x8b, 0x7d, 0x7e, 0xfe, 0x67, 0x63, 0x0e, 0xee, 0xb0,
	0xf7, 0x35, 0x33, 0x7c, 0x5f, 0x33, 0x6d, 0xe7, 0x85, 0x67, 0x99, 0xf8, 0xaa, 0xc6, 0x30, 0x7a,
	0xf3, 0xd1, 0xfb, 0xda, 0xce, 0xbf, 0x01, 0x00, 0x00, 0xff, 0xff, 0x93, 0xa7, 0xcc, 0x25, 0xda,
	0x0d, 0x00, 0x00,
}
