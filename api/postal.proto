/*
Copyright 2016 Jive Communications All rights reserved.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

syntax = "proto3";

option java_package = "com.jive.infra.postal.api";

package api;

message Error{
	uint32 code = 1;
	string message = 2;
}

message Empty {}

message Network {
  string ID = 1;
  map<string, string> annotations = 2;
	string cidr = 3;

}

message Pool {
	message PoolID {
  	string networkID = 1;
  	string ID = 2;
	}
	PoolID ID = 1;
  map<string, string> annotations = 2;
	// The maximum number of addresses that the pool should allocate
  int32 maximumAddresses = 3;
	// The minimum number of addresses that the pool should allocate
  int32 minimumAddresses = 4;
	// Base identity for types of address pools that are supported by the IPAM module
	enum Type {
		// DYNAMIC pool addresses are allocated reactively based on requests to the pool
		DYNAMIC = 0;
		// FIXED pool type indicates that the maximum number of addresses is allocated on the pool's initial creation
		FIXED = 1;
	}
	Type type = 5;
}

message Binding {
	Pool.PoolID poolID = 1;
	string ID = 2;
  map<string, string> annotations = 3;
  string address = 4;
	int64 allocateTime = 5;
  int64 bindTime = 6;
	int64 releaseTime = 7;
}


service Postal {
	rpc NetworkRange (NetworkRangeRequest) returns (NetworkRangeResponse);
  rpc NetworkAdd (NetworkAddRequest) returns (NetworkAddResponse);
  rpc NetworkRemove (NetworkRemoveRequest) returns (NetworkRemoveResponse);

  rpc PoolRange (PoolRangeRequest) returns (PoolRangeResponse);
  rpc PoolAdd (PoolAddRequest) returns (PoolAddResponse);
  rpc PoolRemove (PoolRemoveRequest) returns (PoolRemoveResponse);
  rpc PoolSetMax (PoolSetMinMaxRequest) returns (PoolSetMinMaxResponse);

  rpc BindingRange (BindingRangeRequest) returns (BindingRangeResponse);
  rpc AllocateAddress (AllocateAddressRequest) returns (AllocateAddressResponse);
  rpc BindAddress (BindAddressRequest) returns (BindAddressResponse);
  rpc ReleaseAddress (ReleaseAddressRequest) returns (ReleaseAddressResponse);
}

message NetworkRangeRequest {
  string ID = 1;
  int32 size = 2;
  map<string, string> filters = 3;
}

message NetworkRangeResponse {
  repeated Network networks = 1;
  int32 size = 2;
}

message NetworkAddRequest {
  map<string, string> annotations = 1;
  string cidr = 2;
}

message NetworkAddResponse {
  Network network = 1;
}

message NetworkRemoveRequest {
  string ID = 1;
}

message NetworkRemoveResponse {
}

message PoolRangeRequest {
	Pool.PoolID ID = 1;
	int32 size = 2;
  map<string, string> filters = 3;
}

message PoolRangeResponse {
	repeated Pool pools = 1;
  int32 size = 2;
}

message PoolAddRequest {
	string networkID = 1;
	map<string, string> annotations = 2;
	int32 maximum = 3;
	Pool.Type type = 4;
}

message PoolAddResponse {
	Pool pool = 1;
}

message PoolRemoveRequest {
	Pool.PoolID ID = 1;
}

message PoolRemoveResponse {
}

message PoolSetMinMaxRequest {
	Pool.PoolID ID = 1;
	int32 maximum = 2;
}

message PoolSetMinMaxResponse {

}

message BindingRangeRequest {
	string networkID = 1;
	int32 size = 3;
  map<string, string> filters = 4;

}

message BindingRangeResponse {
	repeated Binding bindings = 1;
	int32 size = 2;
}

message AllocateAddressRequest {
	Pool.PoolID poolID = 1;
	string address = 2;
}

message AllocateAddressResponse {
	Binding binding = 1;
}

message BindAddressRequest {
	Pool.PoolID poolID = 1;
	string address = 2;
	map<string, string> annotations = 3;
}

message BindAddressResponse {
	Binding binding = 1;
}

message ReleaseAddressRequest {
	Pool.PoolID poolID = 1;
	string bindingID = 2;
	string address = 3;
	bool hard = 4;
}

message ReleaseAddressResponse {

}
